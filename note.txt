class ReservationSystem:
    def __init__(self) -> None:
        self.reservations = {} # dictionary to store booking_id
        self.next_reservation_id = 1 # Auto-increment reservation ID
        #self.room_service = room_service
        self.users = dict(data.get('users', {}))  # Convert to regular dict
        self.rooms = dict(data.get('rooms', {}))  # Convert to regular dict

    """ Method to add available rooms
    - First find the rooms 
    - Then if their is any room that is vacant the room should be added to the list of available rooms
    """
    def available_rooms (self):
        # List to store vacant rooms
        vacant_rooms = []

        # Checking if rooms is not NOne before accessing .items()
        if self.rooms is not None: 
            #filter and collect only vacant rooms
            for room_number, room in self.rooms:
                if room['status'] == 'vacant':
                    vacant_rooms.append((room_number, room))
                    # Check if there are any vacant rooms to display
            if vacant_rooms:
                for room_number, room in vacant_rooms:
                    print(f"Room {room_number} is a {room['room_type']} bed room that goes for {room['price']} it is currently {room['status']}")
            else:
            # No vacant rooms available
                print("No vacant rooms available.")
        else: 
            print(f"No rooms available")



    def reserved_room(self, user_id: int):
        """ How is a guest going to be able to reserver a room
       - find the guest_id: user_id
       - if the user exist we return the name of the user
       - find the room type
       - pass available room_numbers that are of the type and are vacant into a list 
       - and pass the first vacant room on the list  to the user and remove it from the list
       - store user and room in a dictionary
       """
                
        print(f"Received User ID: {user_id}")
        
        # Find the user
        user = self.users.get(str(user_id))
        
        if user and user['role'] == 'guest':
            user_name = user['name']
            print(f"User {user_name} (ID: {user_id}) found.")
            
            # Find an available room
            available_rooms = [room_id for room_id, room in self.rooms.items() if room['status'] == 'vacant']
            
            if available_rooms:
                assigned_room = available_rooms[0]
                # Update room status
                self.rooms[assigned_room]['status'] = 'occupied'
                
                # Store the reservation
                self.reservations[user_id] = assigned_room
                
                print(f"Room {assigned_room} has been reserved for {user_name}.")
            else:
                print("No available rooms.")
        else:
            print(f"User ID {user_id} is not a valid guest.")






class Booking: 
    def __init__(self, room: Room, booking_id: int, guest: Guest, checkIn: datetime, checkOut: datetime) -> None:
        self.booking_id = booking_id
        self.room = room
        self.guest = guest
        self.checkIn = checkIn
        self.checkOut = checkOut



# Method to display all rooms 
    def display_rooms (self):
        if not self.rooms:
            print("No rooms available")
        else:
            for room_number, room in self.rooms.items():
                print(f"Room {room_number} is a {room.room_type} bed room that goes for {room.price} it is currently {room.status}")
        return self.rooms




    def load_rooms_from_json(self, file_path):
        try:
            with open(file_path, 'r') as file:
                data = json.load(file)
                # Convert each dictionary to a Room object
                for room_number, room_data in data.get('rooms', {}).items():
                    self.rooms[int(room_number)] = Room(
                        room_number=int(room_number),
                        room_type=room_data['room_type'],
                        price=float(room_data['price']),
                        status=room_data['status']
                    )
            print("Rooms loaded from Json file successfully:")
        except FileNotFoundError:
            print(f"THe file {file_path} was not found")
        except json.JSONDecodeError:
            print("Error decoding JSON data")  


def load_json(file_path):
    with open(file_path, 'r') as json_file:
        data = json.load(json_file)
    return data


      for user_id, user in users:
            if user_id not in users:
                print(f"User {user_id} does not exist")
            return False

            if user['role'] == "guest":
                pass


                        if user_id not in users:
            print(f"user not found!!")
            return False
        elif users['role'] == "guest":
            print("user found")
            return True
        else:
            print("User is a staff")\




        # To get the user_id and append it into the user_list
        for user_id, users in user:
            if users['role'] == 'guest':
                user_list.append(user_id)

        
        user_id = user_id
        if user_id in user_list:
            index = user_list.index(user_id)
            print(f"{user_id} is found at index {index}")
            print(f"The item is: {user_list[index]}")
        else: 
            print(f"ID: {user_id} not in the list")





















    def reserved_room (self,  user_id: int ):
        """ How is a guest going to be able to reserver a room
       - find the guest_id: user_id
       - if the user exist we return the name of the user
       - find the room type
       - pass available room_numbers that are of the type and are vacant into a list 
       - and pass the first vacant room on the list  to the user and remove it from the list
       - store user and room in a dictionary
       """
        print(f"Received User ID: {user_id}")
        available_rooms = [] # to store available rooms of type 
        guest_list = [] # to store the user_id in a list
        user = self.users
        rooms = available_rooms
        
        # To get the user_id and append it into the user_list
        for user_id, users in user:
            if users['role'] == 'guest':
                guest_list.append(int(user_id))
        print("Guest List:", guest_list)
        print("Searching for User ID:", user_id)

        if user_id in guest_list:
            index = guest_list.index(user_id)
            print(f"{user_id} is found at index {index}")
        else:
            print(f"{user_id} is not in the list of guests")

    





        def __init__(self):
        self.guests = {}
        self.users = dict(data.get('users', {})) # converting the user to a dict
        self.rooms = dict(data.get('rooms', {})) # converting the rooms to a dict
        self.guests = data.get('guest', {})
        
        for user_id, user_info in self.users.items():
            if user_info['role'] == 'guest':
                checkedIn = self.guests.get(user_id, {}).get('checkedIn', False)
                self.guests[user_id] = Guest(
                    user_id=user_id,
                    name=user_info['name'],
                    email=user_info['email'],
                    password=user_info['password'],
                    checkedIn=checkedIn
                )
        
        self.rooms = dict(data.get('rooms', {}))

    def get_guest_information(self):
        guest_info = []
        for user_id, guest in self.guests.items():
            guest_info.append({
                'user_id': guest.user_id,
                'name': guest.name,
                'email': guest.email,
                'checkedIn': guest.checkedIn
            })
        print(guest_info)
        return guest_info






     # check if user_id is in guest dict
        if user_id not in self.guests:
             print(f"user {user_id} not found")
             return False
        user = self.guests[user_id] 
        
        if checkedIn:
            if user.checkedIn is False:
                user.checkedIn = True
                print(f"user {user_id} was just checked in")
            else:
                print(f"user{user_id} has already been checked in")
        else:
            print(f"User {user_id} is not marked for check-in")



            for user_id, booking in self.guests.items():
                #check if the guest has any active reservations
                if booking['checkedIn'] == True:
                    self.reservation











            # Check if the guest has any reservations made
            for reservation_id, details in self.reservation.items():
                # check if the user_id matches any of the user_id in the reservation table
                if isinstance(details, dict) and details['user_id'] == user_id:
                    print(details)
                    print(f"""
    Guest details:
    Name: {user_name}
    Email: {email}
    - Room Number: {details['room_number']}
    - Checked-In Date: {details['checkedIn']}
    - Checked-In Status: {'Checked In' if check_in_status else 'Not Checked In'}
    """)
                    return True

        return False










sorting algo
 # Method to find a specific user and return all their details of the user
    def find_guest_details(self, user_id):
        """- How to retrieve the users details
        - get the user_id and check for it in the self.user dict and return the user details
        - search the reservation to see if the user/ guest has any reservations made and return the details of the reservation
        """

        # Find if the ID provided matches any ID in the database
        user = self.users.get(str(user_id))



        # Check if the user has a role of guest
        if user and user['role'] == 'guest':
            # get the name and email of the guest
            user_name = user['name']
            email = user['email']
            print(f" Name: {user_name}; email: {email} ") 

            guest = self.guest_status.get(str(user_id))
            check_in_status = guest.get('checkedIn') if guest else False

            # Get all reservations for the user
            guest_reservations = []
            # Check if the guest has any reservations made
            for reservation_id, details in self.reservation.items():
                # check if the user_id matches any of the user_id in the reservation table
                if isinstance(details, dict) and details['user_id'] == user_id:
                    # convert checkedIN date string to datetime object for comparison
                    checkin_date = datetime.strptime(details['checkedIn'], '%Y-%m-%d')
                    guest_reservations.append({
                        'reservation_id': reservation_id,
                        'room_number': details['room_number'],
                        'checkedIn_date': details['checkedIn'],
                        'checkin_date_obj': checkin_date
                    })
            
            if guest_reservations:
                #sort reservations by check-in date, most recent first (reversing the list)
                guest_reservations.sort(key= lambda x: x['checkin_date_obj'], reverse= True)

                # Update guest check-in status in self.guests
                current_date = datetime.now()
                most_recent_reservation = guest_reservations[0]

                # Set checkedIN to True only for the most recent future reservation
                self.guests[str(user_id)] = {
                    'checkedIn': most_recent_reservation['checkin_date_obj'] > current_date
                }

                #print all reservations
                print(f"\nGuest Details for {user_name}:")
                print(f"Email: {email}")
                print("\nReservations:")

                for idx, reservation in enumerate(guest_reservations, 1):
                    is_most_recent = idx == 1
                    print(f"""
Reservation {idx}:
    - Room Number: {reservation['room_number']}
    - Check-in Date: {reservation['checkedIn_date']}
    - Check-in Status: {'Checked In' if is_most_recent and self.guests[str(user_id)]['checkedIn'] else 'Not Checked In'}
""")
                return True
            
            return False